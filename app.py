import streamlit as st
import pandas as pd
import datetime
import json
import os
import google.generativeai as genai

# ============================
# ЁЯЪА PAGE CONFIG
# ============================
st.set_page_config(
    page_title="FinGuard тАФ AI Smart Expense & Budget Companion",
    page_icon="ЁЯТ░",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================
# ЁЯОи CUSTOM STYLING
# ============================
st.markdown("""
<style>
.main-header {
    font-size: 2.5em;
    font-weight: bold;
    color: #0d47a1;
}
.logo-text {
    color: #f44336;
    font-style: italic;
}
.tagline {
    color: #42a5f5;
    font-style: italic;
}
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="main-header">ЁЯТ░ Fin<span class="logo-text">Guard</span></div>', unsafe_allow_html=True)
st.markdown('<p class="tagline">тАФ AI Smart Expense & Budget Companion</p>', unsafe_allow_html=True)

# ============================
# ЁЯУВ FILES
# ============================
DATA_FILE = "expenses.json"
BUDGET_FILE = "budget.json"

CATEGORY_OPTIONS = ["Food", "Transport", "Rent", "Utilities", "Entertainment", "Shopping", "Education", "Health", "Others"]

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
        df = pd.DataFrame(data)
        if not df.empty:
            df["Date"] = pd.to_datetime(df["Date"])
        return df
    return pd.DataFrame(columns=["Date", "Category", "Description", "Amount"])

def save_data(df):
    df["Date"] = df["Date"].astype(str)
    with open(DATA_FILE, "w") as f:
        json.dump(df.to_dict("records"), f, indent=4)

def load_budget():
    if os.path.exists(BUDGET_FILE):
        with open(BUDGET_FILE, "r") as f:
            return json.load(f).get("monthly_budget", 0.0)
    return 0.0

def save_budget(budget):
    with open(BUDGET_FILE, "w") as f:
        json.dump({"monthly_budget": budget}, f, indent=4)

# ============================
# ЁЯдЦ GEMINI AI SETUP
# ============================
@st.cache_resource
def setup_gemini():
    if "GEMINI_API_KEY" not in st.secrets:
        st.warning("тЪая╕П Gemini API Key missing! Add it in .streamlit/secrets.toml")
        return None
    try:
        genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
        return genai.GenerativeModel("gemini-2.5-flash")
    except Exception as e:
        st.error(f"Gemini setup failed: {e}")
        return None

def ask_ai(model, question, df):
    if model is None or df.empty:
        return "тЪая╕П ржбрзЗржЯрж╛ ржпрзЛржЧ ржХрж░рзБржи ржЕржержмрж╛ API Key ржжрж┐ржиред"
    summary = df.groupby("Category")["Amount"].sum().to_dict()
    total = df["Amount"].sum()
    prompt = f"""
You are FinGuard тАФ a smart Bengali financial assistant.
Context: Total Expense тВ╣{total}, Breakdown: {summary}.
Question: {question}
Respond in short, clear Bengali sentences.
"""
    try:
        return model.generate_content(prompt).text
    except Exception as e:
        return f"AI error: {e}"

# ============================
# ЁЯза SESSION STATE
# ============================
if "expense_df" not in st.session_state:
    st.session_state["expense_df"] = load_data()
if "monthly_budget" not in st.session_state:
    st.session_state["monthly_budget"] = load_budget()

df = st.session_state["expense_df"]
model = setup_gemini()

# ============================
# ЁЯзн TABS
# ============================
tab1, tab2, tab3, tab4 = st.tabs(["ЁЯУК ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб", "тЮХ ржЦрж░ржЪ ржпрзЛржЧ ржХрж░рзБржи", "ЁЯдЦ AI рж╕рж╣рж╛ржпрж╝ржХ", "тД╣я╕П рж╕ржорзНржкрж░рзНржХрзЗ"])

# ============================
# TAB 1 тАФ DASHBOARD
# ============================
with tab1:
    st.subheader("ЁЯУИ ржмрзНржпржпрж╝рзЗрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг")
    if not df.empty:
        total = df["Amount"].sum()
        st.metric("ЁЯТ░ ржорзЛржЯ ржЦрж░ржЪ", f"тВ╣{total:,.2f}")

        start_of_month = pd.Timestamp(datetime.date.today().replace(day=1))
        monthly = df[df["Date"] >= start_of_month]
        st.metric("ЁЯТ│ ржПржЗ ржорж╛рж╕рзЗрж░ ржЦрж░ржЪ", f"тВ╣{monthly['Amount'].sum():,.2f}")

        st.bar_chart(df.groupby("Category")["Amount"].sum())
    else:
        st.info("ржЦрж░ржЪ ржпрзЛржЧ ржХрж░рзБржи, рждрж╛рж╣рж▓рзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржжрзЗржЦрж╛ ржпрж╛ржмрзЗред")

    st.markdown("---")
    # тЬЕ FIXED BUDGET INPUT TYPE ISSUE
    current_value = float(st.session_state["monthly_budget"])
    budget = st.number_input("ЁЯОп ржорж╛рж╕рж┐ржХ ржмрж╛ржЬрзЗржЯ (тВ╣)", value=current_value, step=500.0, format="%.2f")
    if st.button("ржмрж╛ржЬрзЗржЯ рж╕рзЗржн ржХрж░рзБржи"):
        save_budget(budget)
        st.session_state["monthly_budget"] = budget
        st.success("тЬЕ ржмрж╛ржЬрзЗржЯ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")

# ============================
# TAB 2 тАФ ADD EXPENSE
# ============================
with tab2:
    st.subheader("тЮХ ржирждрзБржи ржЦрж░ржЪ ржпрзЛржЧ ржХрж░рзБржи")
    with st.form("add_form", clear_on_submit=True):
        date = st.date_input("рждрж╛рж░рж┐ржЦ", datetime.date.today())
        cat = st.selectbox("ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐", CATEGORY_OPTIONS)
        desc = st.text_input("ржмрж┐ржмрж░ржг")
        amt = st.number_input("ржкрж░рж┐ржорж╛ржг (тВ╣)", min_value=0.0, step=10.0)
        submitted = st.form_submit_button("тЬЕ ржЦрж░ржЪ ржпрзЛржЧ ржХрж░рзБржи")
        if submitted and amt > 0:
            new = pd.DataFrame([[date, cat, desc, amt]], columns=["Date", "Category", "Description", "Amount"])
            new["Date"] = pd.to_datetime(new["Date"])
            df = pd.concat([df, new], ignore_index=True)
            save_data(df)
            st.session_state["expense_df"] = df
            st.success("ржЦрж░ржЪ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")

# ============================
# TAB 3 тАФ AI ASSISTANT
# ============================
with tab3:
    st.subheader("ЁЯдЦ FinGuard AI рж╕рж╣рж╛ржпрж╝ржХ")
    q = st.text_area("рждрзЛржорж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзЛ...", placeholder="ржПржЗ ржорж╛рж╕рзЗ ржХрзЛржерж╛ржпрж╝ ржмрзЗрж╢рж┐ ржЦрж░ржЪ ржХрж░рзЗржЫрж┐?")
    if st.button("ржЙрждрзНрждрж░ ржжрзЗржЦрж╛ржУ ЁЯЪА"):
        st.markdown(ask_ai(model, q, df))

# ============================
# TAB 4 тАФ ABOUT
# ============================
with tab4:
    st.markdown("""
### тД╣я╕П FinGuard - ICT Award Build
FinGuard ржПржХржЯрж┐ AI-ржЪрж╛рж▓рж┐ржд ржмрж╛ржЬрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ ржЕрзНржпрж╛ржкред
ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржжрзЗрж░ ржмрзНржпржпрж╝ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг, ржмрж╛ржЬрзЗржЯ ржоржирж┐ржЯрж░рж┐ржВ ржПржмржВ AI ржнрж┐рждрзНрждрж┐ржХ ржЯрж┐ржкрж╕ ржжрзЗржпрж╝ред

**ржорзВрж▓ ржлрж┐ржЪрж╛рж░рж╕ржорзВрж╣:**
- ЁЯТ░ Expense Dashboard  
- ЁЯУК Budget Tracker  
- ЁЯдЦ Gemini 2.5 Flash Assistant  
- ЁЯза ржмрж╛ржВрж▓рж╛ AI ржмрж┐рж╢рзНрж▓рзЗрж╖ржг  

ЁЯСитАНЁЯТ╗ **рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:** Zahid Hasan  
ЁЯПЖ ICT Innovation Award 2025 Submission
""")
